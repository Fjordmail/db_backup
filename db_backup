#!/bin/sh
set -e      # Abort upon error
set -u      # Abort upon udefined variable
#set -x     # Print every command

readonly path="$(dirname `readlink -f "$0"`)"

#######################################
#   Description:
#       Backup DB from fjordmail-admin
#   Usage:
#       ./db_backup
#   Arguments:
#        None!
#   Returns:
#       0 upon success
#       >=1 upon error
#######################################
main() {
    # Check if $USAGE is respected
    readonly USAGE='Usage: ./db_backup'
    [ "$#" -ne 0 ] && err "Error: 0 argument expected, $# received" && err "$USAGE" && return 1

    readonly bk_mount='/mnt/volume_fra1_01'

    find "$path"/* -name *.env | while read env_file; do
        set -a; . "$env_file"; set +a
        fetch_dump
    done

    compress_dumps
    delete_old
}

# Connect to remote server and dump DB
fetch_dump() {
    readonly bk_name="$BK_DB_NAME.$(date +'%F_%H-%m').sql"
    readonly bk_volume="$bk_mount/$BK_DB_NAME"
    mkdir -p "$bk_volume"

    # Creating backup remotely
    printf '%s - %s - Creating remote dump...\n' "$(date)" "$BK_DB_NAME"

    # Backup structure AND date
    [ -z "$BK_TABLES_NODATA" ] \
        && opts='' \
        || opts="--ignore-table=$BK_DB_NAME.$(echo "$BK_TABLES_NODATA" | sed "s/,/--ignore-table=$BK_DB_NAME\./g")"
    ssh $BK_SSH_HOST "mysqldump -u $BK_DB_USER -p$BK_DB_PW $opts $BK_DB_NAME > '/tmp/$bk_name'"

    # Backup ONLY structure
    [ -z "$BK_TABLES_NODATA" ] \
        || ssh $BK_SSH_HOST "mysqldump -u $BK_DB_USER -p$BK_DB_PW --no-data $BK_DB_NAME $(echo "$BK_TABLES_NODATA" | sed 's/,/ /g') >> '/tmp/$bk_name'"

    # Checksum
    readonly remote_sum="$(ssh "$BK_SSH_HOST" "md5sum '/tmp/$bk_name'" | awk '{ print $1 }')"

    # Download backup and delete from remote
    printf '%s - %s - Fetching remote dump...\n' "$(date)" "$BK_DB_NAME"
    scp $BK_SSH_HOST:"/tmp/$bk_name" "$bk_volume/"
    ssh $BK_SSH_HOST "rm /tmp/$bk_name"
    readonly local_sum="$(md5sum "$bk_volume/$bk_name" | awk '{ print $1 }')"

    # Init backup log
    printf '%s - %s - Checking integrity...\n' "$(date)" "$BK_DB_NAME"
    [ -f "$bk_volume/backup.log" ] || printf 'file,remote_sum,local_sum,integrity\n' > "$bk_volume/backup.log"

    # Find backup state
    [ "$remote_sum" = "$local_sum" ] \
        && readonly bk_state='OK' \
        || readonly bk_state='NOK'

    # Log
    printf '%s,%s,%s,%s\n' "$bk_name" "$remote_sum" "$local_sum" "$bk_state" >> "$bk_volume/backup.log"
    printf '%s - %s - Checksum %s...\n' "$(date)" "$BK_DB_NAME" "$bk_state"
}

# Compress dump
compress_dumps() {
    printf '%s - Compressing dumps...\n' "$(date)"
    find "$bk_mount"/* -name *.sql -exec xz -9 {} \;
}

# Delete old dumps
delete_old() {
    printf '%s - Deleting old dumps...\n' "$(date)"

    # Delete files older than 30 days
    find "$bk_mount"/* -name *.xz -mtime +30 -exec rm {} \;
}

#######################################
#   Print error message to stderr
#   https://google.github.io/styleguide/shellguide.html
#######################################
err() { echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2; }

main "$@"; exit

